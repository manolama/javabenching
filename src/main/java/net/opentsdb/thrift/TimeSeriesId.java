/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package net.opentsdb.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-25")
public class TimeSeriesId implements org.apache.thrift.TBase<TimeSeriesId, TimeSeriesId._Fields>, java.io.Serializable, Cloneable, Comparable<TimeSeriesId> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimeSeriesId");

  private static final org.apache.thrift.protocol.TField MYALIAS_FIELD_DESC = new org.apache.thrift.protocol.TField("myalias", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAMESPACES_FIELD_DESC = new org.apache.thrift.protocol.TField("namespaces", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField METRICS_FIELD_DESC = new org.apache.thrift.protocol.TField("metrics", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField AGGREGATED_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregated_tags", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField AGGREGATED_TAG_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregated_tag_values", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField DISJOINT_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("disjoint_tags", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField DISJOINT_TAG_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("disjoint_tag_values", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TimeSeriesIdStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TimeSeriesIdTupleSchemeFactory();

  public java.lang.String myalias; // required
  public java.util.List<java.nio.ByteBuffer> namespaces; // required
  public java.util.List<java.nio.ByteBuffer> metrics; // required
  public java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer> tags; // required
  public java.util.List<java.nio.ByteBuffer> aggregated_tags; // required
  public java.util.List<java.nio.ByteBuffer> aggregated_tag_values; // required
  public java.util.List<java.nio.ByteBuffer> disjoint_tags; // required
  public java.util.List<java.nio.ByteBuffer> disjoint_tag_values; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MYALIAS((short)1, "myalias"),
    NAMESPACES((short)2, "namespaces"),
    METRICS((short)3, "metrics"),
    TAGS((short)4, "tags"),
    AGGREGATED_TAGS((short)5, "aggregated_tags"),
    AGGREGATED_TAG_VALUES((short)6, "aggregated_tag_values"),
    DISJOINT_TAGS((short)7, "disjoint_tags"),
    DISJOINT_TAG_VALUES((short)8, "disjoint_tag_values");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MYALIAS
          return MYALIAS;
        case 2: // NAMESPACES
          return NAMESPACES;
        case 3: // METRICS
          return METRICS;
        case 4: // TAGS
          return TAGS;
        case 5: // AGGREGATED_TAGS
          return AGGREGATED_TAGS;
        case 6: // AGGREGATED_TAG_VALUES
          return AGGREGATED_TAG_VALUES;
        case 7: // DISJOINT_TAGS
          return DISJOINT_TAGS;
        case 8: // DISJOINT_TAG_VALUES
          return DISJOINT_TAG_VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MYALIAS, new org.apache.thrift.meta_data.FieldMetaData("myalias", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAMESPACES, new org.apache.thrift.meta_data.FieldMetaData("namespaces", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.METRICS, new org.apache.thrift.meta_data.FieldMetaData("metrics", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.AGGREGATED_TAGS, new org.apache.thrift.meta_data.FieldMetaData("aggregated_tags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.AGGREGATED_TAG_VALUES, new org.apache.thrift.meta_data.FieldMetaData("aggregated_tag_values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.DISJOINT_TAGS, new org.apache.thrift.meta_data.FieldMetaData("disjoint_tags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.DISJOINT_TAG_VALUES, new org.apache.thrift.meta_data.FieldMetaData("disjoint_tag_values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimeSeriesId.class, metaDataMap);
  }

  public TimeSeriesId() {
  }

  public TimeSeriesId(
    java.lang.String myalias,
    java.util.List<java.nio.ByteBuffer> namespaces,
    java.util.List<java.nio.ByteBuffer> metrics,
    java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer> tags,
    java.util.List<java.nio.ByteBuffer> aggregated_tags,
    java.util.List<java.nio.ByteBuffer> aggregated_tag_values,
    java.util.List<java.nio.ByteBuffer> disjoint_tags,
    java.util.List<java.nio.ByteBuffer> disjoint_tag_values)
  {
    this();
    this.myalias = myalias;
    this.namespaces = namespaces;
    this.metrics = metrics;
    this.tags = tags;
    this.aggregated_tags = aggregated_tags;
    this.aggregated_tag_values = aggregated_tag_values;
    this.disjoint_tags = disjoint_tags;
    this.disjoint_tag_values = disjoint_tag_values;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimeSeriesId(TimeSeriesId other) {
    if (other.isSetMyalias()) {
      this.myalias = other.myalias;
    }
    if (other.isSetNamespaces()) {
      java.util.List<java.nio.ByteBuffer> __this__namespaces = new java.util.ArrayList<java.nio.ByteBuffer>(other.namespaces);
      this.namespaces = __this__namespaces;
    }
    if (other.isSetMetrics()) {
      java.util.List<java.nio.ByteBuffer> __this__metrics = new java.util.ArrayList<java.nio.ByteBuffer>(other.metrics);
      this.metrics = __this__metrics;
    }
    if (other.isSetTags()) {
      java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer> __this__tags = new java.util.HashMap<java.nio.ByteBuffer,java.nio.ByteBuffer>(other.tags);
      this.tags = __this__tags;
    }
    if (other.isSetAggregated_tags()) {
      java.util.List<java.nio.ByteBuffer> __this__aggregated_tags = new java.util.ArrayList<java.nio.ByteBuffer>(other.aggregated_tags);
      this.aggregated_tags = __this__aggregated_tags;
    }
    if (other.isSetAggregated_tag_values()) {
      java.util.List<java.nio.ByteBuffer> __this__aggregated_tag_values = new java.util.ArrayList<java.nio.ByteBuffer>(other.aggregated_tag_values);
      this.aggregated_tag_values = __this__aggregated_tag_values;
    }
    if (other.isSetDisjoint_tags()) {
      java.util.List<java.nio.ByteBuffer> __this__disjoint_tags = new java.util.ArrayList<java.nio.ByteBuffer>(other.disjoint_tags);
      this.disjoint_tags = __this__disjoint_tags;
    }
    if (other.isSetDisjoint_tag_values()) {
      java.util.List<java.nio.ByteBuffer> __this__disjoint_tag_values = new java.util.ArrayList<java.nio.ByteBuffer>(other.disjoint_tag_values);
      this.disjoint_tag_values = __this__disjoint_tag_values;
    }
  }

  public TimeSeriesId deepCopy() {
    return new TimeSeriesId(this);
  }

  @Override
  public void clear() {
    this.myalias = null;
    this.namespaces = null;
    this.metrics = null;
    this.tags = null;
    this.aggregated_tags = null;
    this.aggregated_tag_values = null;
    this.disjoint_tags = null;
    this.disjoint_tag_values = null;
  }

  public java.lang.String getMyalias() {
    return this.myalias;
  }

  public TimeSeriesId setMyalias(java.lang.String myalias) {
    this.myalias = myalias;
    return this;
  }

  public void unsetMyalias() {
    this.myalias = null;
  }

  /** Returns true if field myalias is set (has been assigned a value) and false otherwise */
  public boolean isSetMyalias() {
    return this.myalias != null;
  }

  public void setMyaliasIsSet(boolean value) {
    if (!value) {
      this.myalias = null;
    }
  }

  public int getNamespacesSize() {
    return (this.namespaces == null) ? 0 : this.namespaces.size();
  }

  public java.util.Iterator<java.nio.ByteBuffer> getNamespacesIterator() {
    return (this.namespaces == null) ? null : this.namespaces.iterator();
  }

  public void addToNamespaces(java.nio.ByteBuffer elem) {
    if (this.namespaces == null) {
      this.namespaces = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.namespaces.add(elem);
  }

  public java.util.List<java.nio.ByteBuffer> getNamespaces() {
    return this.namespaces;
  }

  public TimeSeriesId setNamespaces(java.util.List<java.nio.ByteBuffer> namespaces) {
    this.namespaces = namespaces;
    return this;
  }

  public void unsetNamespaces() {
    this.namespaces = null;
  }

  /** Returns true if field namespaces is set (has been assigned a value) and false otherwise */
  public boolean isSetNamespaces() {
    return this.namespaces != null;
  }

  public void setNamespacesIsSet(boolean value) {
    if (!value) {
      this.namespaces = null;
    }
  }

  public int getMetricsSize() {
    return (this.metrics == null) ? 0 : this.metrics.size();
  }

  public java.util.Iterator<java.nio.ByteBuffer> getMetricsIterator() {
    return (this.metrics == null) ? null : this.metrics.iterator();
  }

  public void addToMetrics(java.nio.ByteBuffer elem) {
    if (this.metrics == null) {
      this.metrics = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.metrics.add(elem);
  }

  public java.util.List<java.nio.ByteBuffer> getMetrics() {
    return this.metrics;
  }

  public TimeSeriesId setMetrics(java.util.List<java.nio.ByteBuffer> metrics) {
    this.metrics = metrics;
    return this;
  }

  public void unsetMetrics() {
    this.metrics = null;
  }

  /** Returns true if field metrics is set (has been assigned a value) and false otherwise */
  public boolean isSetMetrics() {
    return this.metrics != null;
  }

  public void setMetricsIsSet(boolean value) {
    if (!value) {
      this.metrics = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public void putToTags(java.nio.ByteBuffer key, java.nio.ByteBuffer val) {
    if (this.tags == null) {
      this.tags = new java.util.HashMap<java.nio.ByteBuffer,java.nio.ByteBuffer>();
    }
    this.tags.put(key, val);
  }

  public java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer> getTags() {
    return this.tags;
  }

  public TimeSeriesId setTags(java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer> tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public int getAggregated_tagsSize() {
    return (this.aggregated_tags == null) ? 0 : this.aggregated_tags.size();
  }

  public java.util.Iterator<java.nio.ByteBuffer> getAggregated_tagsIterator() {
    return (this.aggregated_tags == null) ? null : this.aggregated_tags.iterator();
  }

  public void addToAggregated_tags(java.nio.ByteBuffer elem) {
    if (this.aggregated_tags == null) {
      this.aggregated_tags = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.aggregated_tags.add(elem);
  }

  public java.util.List<java.nio.ByteBuffer> getAggregated_tags() {
    return this.aggregated_tags;
  }

  public TimeSeriesId setAggregated_tags(java.util.List<java.nio.ByteBuffer> aggregated_tags) {
    this.aggregated_tags = aggregated_tags;
    return this;
  }

  public void unsetAggregated_tags() {
    this.aggregated_tags = null;
  }

  /** Returns true if field aggregated_tags is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregated_tags() {
    return this.aggregated_tags != null;
  }

  public void setAggregated_tagsIsSet(boolean value) {
    if (!value) {
      this.aggregated_tags = null;
    }
  }

  public int getAggregated_tag_valuesSize() {
    return (this.aggregated_tag_values == null) ? 0 : this.aggregated_tag_values.size();
  }

  public java.util.Iterator<java.nio.ByteBuffer> getAggregated_tag_valuesIterator() {
    return (this.aggregated_tag_values == null) ? null : this.aggregated_tag_values.iterator();
  }

  public void addToAggregated_tag_values(java.nio.ByteBuffer elem) {
    if (this.aggregated_tag_values == null) {
      this.aggregated_tag_values = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.aggregated_tag_values.add(elem);
  }

  public java.util.List<java.nio.ByteBuffer> getAggregated_tag_values() {
    return this.aggregated_tag_values;
  }

  public TimeSeriesId setAggregated_tag_values(java.util.List<java.nio.ByteBuffer> aggregated_tag_values) {
    this.aggregated_tag_values = aggregated_tag_values;
    return this;
  }

  public void unsetAggregated_tag_values() {
    this.aggregated_tag_values = null;
  }

  /** Returns true if field aggregated_tag_values is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregated_tag_values() {
    return this.aggregated_tag_values != null;
  }

  public void setAggregated_tag_valuesIsSet(boolean value) {
    if (!value) {
      this.aggregated_tag_values = null;
    }
  }

  public int getDisjoint_tagsSize() {
    return (this.disjoint_tags == null) ? 0 : this.disjoint_tags.size();
  }

  public java.util.Iterator<java.nio.ByteBuffer> getDisjoint_tagsIterator() {
    return (this.disjoint_tags == null) ? null : this.disjoint_tags.iterator();
  }

  public void addToDisjoint_tags(java.nio.ByteBuffer elem) {
    if (this.disjoint_tags == null) {
      this.disjoint_tags = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.disjoint_tags.add(elem);
  }

  public java.util.List<java.nio.ByteBuffer> getDisjoint_tags() {
    return this.disjoint_tags;
  }

  public TimeSeriesId setDisjoint_tags(java.util.List<java.nio.ByteBuffer> disjoint_tags) {
    this.disjoint_tags = disjoint_tags;
    return this;
  }

  public void unsetDisjoint_tags() {
    this.disjoint_tags = null;
  }

  /** Returns true if field disjoint_tags is set (has been assigned a value) and false otherwise */
  public boolean isSetDisjoint_tags() {
    return this.disjoint_tags != null;
  }

  public void setDisjoint_tagsIsSet(boolean value) {
    if (!value) {
      this.disjoint_tags = null;
    }
  }

  public int getDisjoint_tag_valuesSize() {
    return (this.disjoint_tag_values == null) ? 0 : this.disjoint_tag_values.size();
  }

  public java.util.Iterator<java.nio.ByteBuffer> getDisjoint_tag_valuesIterator() {
    return (this.disjoint_tag_values == null) ? null : this.disjoint_tag_values.iterator();
  }

  public void addToDisjoint_tag_values(java.nio.ByteBuffer elem) {
    if (this.disjoint_tag_values == null) {
      this.disjoint_tag_values = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.disjoint_tag_values.add(elem);
  }

  public java.util.List<java.nio.ByteBuffer> getDisjoint_tag_values() {
    return this.disjoint_tag_values;
  }

  public TimeSeriesId setDisjoint_tag_values(java.util.List<java.nio.ByteBuffer> disjoint_tag_values) {
    this.disjoint_tag_values = disjoint_tag_values;
    return this;
  }

  public void unsetDisjoint_tag_values() {
    this.disjoint_tag_values = null;
  }

  /** Returns true if field disjoint_tag_values is set (has been assigned a value) and false otherwise */
  public boolean isSetDisjoint_tag_values() {
    return this.disjoint_tag_values != null;
  }

  public void setDisjoint_tag_valuesIsSet(boolean value) {
    if (!value) {
      this.disjoint_tag_values = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case MYALIAS:
      if (value == null) {
        unsetMyalias();
      } else {
        setMyalias((java.lang.String)value);
      }
      break;

    case NAMESPACES:
      if (value == null) {
        unsetNamespaces();
      } else {
        setNamespaces((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case METRICS:
      if (value == null) {
        unsetMetrics();
      } else {
        setMetrics((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer>)value);
      }
      break;

    case AGGREGATED_TAGS:
      if (value == null) {
        unsetAggregated_tags();
      } else {
        setAggregated_tags((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case AGGREGATED_TAG_VALUES:
      if (value == null) {
        unsetAggregated_tag_values();
      } else {
        setAggregated_tag_values((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case DISJOINT_TAGS:
      if (value == null) {
        unsetDisjoint_tags();
      } else {
        setDisjoint_tags((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case DISJOINT_TAG_VALUES:
      if (value == null) {
        unsetDisjoint_tag_values();
      } else {
        setDisjoint_tag_values((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case MYALIAS:
      return getMyalias();

    case NAMESPACES:
      return getNamespaces();

    case METRICS:
      return getMetrics();

    case TAGS:
      return getTags();

    case AGGREGATED_TAGS:
      return getAggregated_tags();

    case AGGREGATED_TAG_VALUES:
      return getAggregated_tag_values();

    case DISJOINT_TAGS:
      return getDisjoint_tags();

    case DISJOINT_TAG_VALUES:
      return getDisjoint_tag_values();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case MYALIAS:
      return isSetMyalias();
    case NAMESPACES:
      return isSetNamespaces();
    case METRICS:
      return isSetMetrics();
    case TAGS:
      return isSetTags();
    case AGGREGATED_TAGS:
      return isSetAggregated_tags();
    case AGGREGATED_TAG_VALUES:
      return isSetAggregated_tag_values();
    case DISJOINT_TAGS:
      return isSetDisjoint_tags();
    case DISJOINT_TAG_VALUES:
      return isSetDisjoint_tag_values();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TimeSeriesId)
      return this.equals((TimeSeriesId)that);
    return false;
  }

  public boolean equals(TimeSeriesId that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_myalias = true && this.isSetMyalias();
    boolean that_present_myalias = true && that.isSetMyalias();
    if (this_present_myalias || that_present_myalias) {
      if (!(this_present_myalias && that_present_myalias))
        return false;
      if (!this.myalias.equals(that.myalias))
        return false;
    }

    boolean this_present_namespaces = true && this.isSetNamespaces();
    boolean that_present_namespaces = true && that.isSetNamespaces();
    if (this_present_namespaces || that_present_namespaces) {
      if (!(this_present_namespaces && that_present_namespaces))
        return false;
      if (!this.namespaces.equals(that.namespaces))
        return false;
    }

    boolean this_present_metrics = true && this.isSetMetrics();
    boolean that_present_metrics = true && that.isSetMetrics();
    if (this_present_metrics || that_present_metrics) {
      if (!(this_present_metrics && that_present_metrics))
        return false;
      if (!this.metrics.equals(that.metrics))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_aggregated_tags = true && this.isSetAggregated_tags();
    boolean that_present_aggregated_tags = true && that.isSetAggregated_tags();
    if (this_present_aggregated_tags || that_present_aggregated_tags) {
      if (!(this_present_aggregated_tags && that_present_aggregated_tags))
        return false;
      if (!this.aggregated_tags.equals(that.aggregated_tags))
        return false;
    }

    boolean this_present_aggregated_tag_values = true && this.isSetAggregated_tag_values();
    boolean that_present_aggregated_tag_values = true && that.isSetAggregated_tag_values();
    if (this_present_aggregated_tag_values || that_present_aggregated_tag_values) {
      if (!(this_present_aggregated_tag_values && that_present_aggregated_tag_values))
        return false;
      if (!this.aggregated_tag_values.equals(that.aggregated_tag_values))
        return false;
    }

    boolean this_present_disjoint_tags = true && this.isSetDisjoint_tags();
    boolean that_present_disjoint_tags = true && that.isSetDisjoint_tags();
    if (this_present_disjoint_tags || that_present_disjoint_tags) {
      if (!(this_present_disjoint_tags && that_present_disjoint_tags))
        return false;
      if (!this.disjoint_tags.equals(that.disjoint_tags))
        return false;
    }

    boolean this_present_disjoint_tag_values = true && this.isSetDisjoint_tag_values();
    boolean that_present_disjoint_tag_values = true && that.isSetDisjoint_tag_values();
    if (this_present_disjoint_tag_values || that_present_disjoint_tag_values) {
      if (!(this_present_disjoint_tag_values && that_present_disjoint_tag_values))
        return false;
      if (!this.disjoint_tag_values.equals(that.disjoint_tag_values))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMyalias()) ? 131071 : 524287);
    if (isSetMyalias())
      hashCode = hashCode * 8191 + myalias.hashCode();

    hashCode = hashCode * 8191 + ((isSetNamespaces()) ? 131071 : 524287);
    if (isSetNamespaces())
      hashCode = hashCode * 8191 + namespaces.hashCode();

    hashCode = hashCode * 8191 + ((isSetMetrics()) ? 131071 : 524287);
    if (isSetMetrics())
      hashCode = hashCode * 8191 + metrics.hashCode();

    hashCode = hashCode * 8191 + ((isSetTags()) ? 131071 : 524287);
    if (isSetTags())
      hashCode = hashCode * 8191 + tags.hashCode();

    hashCode = hashCode * 8191 + ((isSetAggregated_tags()) ? 131071 : 524287);
    if (isSetAggregated_tags())
      hashCode = hashCode * 8191 + aggregated_tags.hashCode();

    hashCode = hashCode * 8191 + ((isSetAggregated_tag_values()) ? 131071 : 524287);
    if (isSetAggregated_tag_values())
      hashCode = hashCode * 8191 + aggregated_tag_values.hashCode();

    hashCode = hashCode * 8191 + ((isSetDisjoint_tags()) ? 131071 : 524287);
    if (isSetDisjoint_tags())
      hashCode = hashCode * 8191 + disjoint_tags.hashCode();

    hashCode = hashCode * 8191 + ((isSetDisjoint_tag_values()) ? 131071 : 524287);
    if (isSetDisjoint_tag_values())
      hashCode = hashCode * 8191 + disjoint_tag_values.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TimeSeriesId other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetMyalias()).compareTo(other.isSetMyalias());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyalias()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myalias, other.myalias);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNamespaces()).compareTo(other.isSetNamespaces());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNamespaces()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.namespaces, other.namespaces);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMetrics()).compareTo(other.isSetMetrics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetrics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metrics, other.metrics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAggregated_tags()).compareTo(other.isSetAggregated_tags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregated_tags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregated_tags, other.aggregated_tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAggregated_tag_values()).compareTo(other.isSetAggregated_tag_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregated_tag_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregated_tag_values, other.aggregated_tag_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDisjoint_tags()).compareTo(other.isSetDisjoint_tags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisjoint_tags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disjoint_tags, other.disjoint_tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDisjoint_tag_values()).compareTo(other.isSetDisjoint_tag_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisjoint_tag_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disjoint_tag_values, other.disjoint_tag_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TimeSeriesId(");
    boolean first = true;

    sb.append("myalias:");
    if (this.myalias == null) {
      sb.append("null");
    } else {
      sb.append(this.myalias);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("namespaces:");
    if (this.namespaces == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.namespaces, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metrics:");
    if (this.metrics == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.metrics, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tags:");
    if (this.tags == null) {
      sb.append("null");
    } else {
      sb.append(this.tags);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("aggregated_tags:");
    if (this.aggregated_tags == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.aggregated_tags, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("aggregated_tag_values:");
    if (this.aggregated_tag_values == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.aggregated_tag_values, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("disjoint_tags:");
    if (this.disjoint_tags == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.disjoint_tags, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("disjoint_tag_values:");
    if (this.disjoint_tag_values == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.disjoint_tag_values, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimeSeriesIdStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TimeSeriesIdStandardScheme getScheme() {
      return new TimeSeriesIdStandardScheme();
    }
  }

  private static class TimeSeriesIdStandardScheme extends org.apache.thrift.scheme.StandardScheme<TimeSeriesId> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TimeSeriesId struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MYALIAS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.myalias = iprot.readString();
              struct.setMyaliasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAMESPACES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.namespaces = new java.util.ArrayList<java.nio.ByteBuffer>(_list0.size);
                java.nio.ByteBuffer _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readBinary();
                  struct.namespaces.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setNamespacesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // METRICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.metrics = new java.util.ArrayList<java.nio.ByteBuffer>(_list3.size);
                java.nio.ByteBuffer _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readBinary();
                  struct.metrics.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setMetricsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.tags = new java.util.HashMap<java.nio.ByteBuffer,java.nio.ByteBuffer>(2*_map6.size);
                java.nio.ByteBuffer _key7;
                java.nio.ByteBuffer _val8;
                for (int _i9 = 0; _i9 < _map6.size; ++_i9)
                {
                  _key7 = iprot.readBinary();
                  _val8 = iprot.readBinary();
                  struct.tags.put(_key7, _val8);
                }
                iprot.readMapEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AGGREGATED_TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.aggregated_tags = new java.util.ArrayList<java.nio.ByteBuffer>(_list10.size);
                java.nio.ByteBuffer _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = iprot.readBinary();
                  struct.aggregated_tags.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setAggregated_tagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AGGREGATED_TAG_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list13 = iprot.readListBegin();
                struct.aggregated_tag_values = new java.util.ArrayList<java.nio.ByteBuffer>(_list13.size);
                java.nio.ByteBuffer _elem14;
                for (int _i15 = 0; _i15 < _list13.size; ++_i15)
                {
                  _elem14 = iprot.readBinary();
                  struct.aggregated_tag_values.add(_elem14);
                }
                iprot.readListEnd();
              }
              struct.setAggregated_tag_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DISJOINT_TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.disjoint_tags = new java.util.ArrayList<java.nio.ByteBuffer>(_list16.size);
                java.nio.ByteBuffer _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readBinary();
                  struct.disjoint_tags.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setDisjoint_tagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DISJOINT_TAG_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.disjoint_tag_values = new java.util.ArrayList<java.nio.ByteBuffer>(_list19.size);
                java.nio.ByteBuffer _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = iprot.readBinary();
                  struct.disjoint_tag_values.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setDisjoint_tag_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TimeSeriesId struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.myalias != null) {
        oprot.writeFieldBegin(MYALIAS_FIELD_DESC);
        oprot.writeString(struct.myalias);
        oprot.writeFieldEnd();
      }
      if (struct.namespaces != null) {
        oprot.writeFieldBegin(NAMESPACES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.namespaces.size()));
          for (java.nio.ByteBuffer _iter22 : struct.namespaces)
          {
            oprot.writeBinary(_iter22);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.metrics != null) {
        oprot.writeFieldBegin(METRICS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.metrics.size()));
          for (java.nio.ByteBuffer _iter23 : struct.metrics)
          {
            oprot.writeBinary(_iter23);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.tags != null) {
        oprot.writeFieldBegin(TAGS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
          for (java.util.Map.Entry<java.nio.ByteBuffer, java.nio.ByteBuffer> _iter24 : struct.tags.entrySet())
          {
            oprot.writeBinary(_iter24.getKey());
            oprot.writeBinary(_iter24.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.aggregated_tags != null) {
        oprot.writeFieldBegin(AGGREGATED_TAGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.aggregated_tags.size()));
          for (java.nio.ByteBuffer _iter25 : struct.aggregated_tags)
          {
            oprot.writeBinary(_iter25);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.aggregated_tag_values != null) {
        oprot.writeFieldBegin(AGGREGATED_TAG_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.aggregated_tag_values.size()));
          for (java.nio.ByteBuffer _iter26 : struct.aggregated_tag_values)
          {
            oprot.writeBinary(_iter26);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.disjoint_tags != null) {
        oprot.writeFieldBegin(DISJOINT_TAGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.disjoint_tags.size()));
          for (java.nio.ByteBuffer _iter27 : struct.disjoint_tags)
          {
            oprot.writeBinary(_iter27);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.disjoint_tag_values != null) {
        oprot.writeFieldBegin(DISJOINT_TAG_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.disjoint_tag_values.size()));
          for (java.nio.ByteBuffer _iter28 : struct.disjoint_tag_values)
          {
            oprot.writeBinary(_iter28);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimeSeriesIdTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TimeSeriesIdTupleScheme getScheme() {
      return new TimeSeriesIdTupleScheme();
    }
  }

  private static class TimeSeriesIdTupleScheme extends org.apache.thrift.scheme.TupleScheme<TimeSeriesId> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TimeSeriesId struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMyalias()) {
        optionals.set(0);
      }
      if (struct.isSetNamespaces()) {
        optionals.set(1);
      }
      if (struct.isSetMetrics()) {
        optionals.set(2);
      }
      if (struct.isSetTags()) {
        optionals.set(3);
      }
      if (struct.isSetAggregated_tags()) {
        optionals.set(4);
      }
      if (struct.isSetAggregated_tag_values()) {
        optionals.set(5);
      }
      if (struct.isSetDisjoint_tags()) {
        optionals.set(6);
      }
      if (struct.isSetDisjoint_tag_values()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetMyalias()) {
        oprot.writeString(struct.myalias);
      }
      if (struct.isSetNamespaces()) {
        {
          oprot.writeI32(struct.namespaces.size());
          for (java.nio.ByteBuffer _iter29 : struct.namespaces)
          {
            oprot.writeBinary(_iter29);
          }
        }
      }
      if (struct.isSetMetrics()) {
        {
          oprot.writeI32(struct.metrics.size());
          for (java.nio.ByteBuffer _iter30 : struct.metrics)
          {
            oprot.writeBinary(_iter30);
          }
        }
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (java.util.Map.Entry<java.nio.ByteBuffer, java.nio.ByteBuffer> _iter31 : struct.tags.entrySet())
          {
            oprot.writeBinary(_iter31.getKey());
            oprot.writeBinary(_iter31.getValue());
          }
        }
      }
      if (struct.isSetAggregated_tags()) {
        {
          oprot.writeI32(struct.aggregated_tags.size());
          for (java.nio.ByteBuffer _iter32 : struct.aggregated_tags)
          {
            oprot.writeBinary(_iter32);
          }
        }
      }
      if (struct.isSetAggregated_tag_values()) {
        {
          oprot.writeI32(struct.aggregated_tag_values.size());
          for (java.nio.ByteBuffer _iter33 : struct.aggregated_tag_values)
          {
            oprot.writeBinary(_iter33);
          }
        }
      }
      if (struct.isSetDisjoint_tags()) {
        {
          oprot.writeI32(struct.disjoint_tags.size());
          for (java.nio.ByteBuffer _iter34 : struct.disjoint_tags)
          {
            oprot.writeBinary(_iter34);
          }
        }
      }
      if (struct.isSetDisjoint_tag_values()) {
        {
          oprot.writeI32(struct.disjoint_tag_values.size());
          for (java.nio.ByteBuffer _iter35 : struct.disjoint_tag_values)
          {
            oprot.writeBinary(_iter35);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TimeSeriesId struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.myalias = iprot.readString();
        struct.setMyaliasIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list36 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.namespaces = new java.util.ArrayList<java.nio.ByteBuffer>(_list36.size);
          java.nio.ByteBuffer _elem37;
          for (int _i38 = 0; _i38 < _list36.size; ++_i38)
          {
            _elem37 = iprot.readBinary();
            struct.namespaces.add(_elem37);
          }
        }
        struct.setNamespacesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.metrics = new java.util.ArrayList<java.nio.ByteBuffer>(_list39.size);
          java.nio.ByteBuffer _elem40;
          for (int _i41 = 0; _i41 < _list39.size; ++_i41)
          {
            _elem40 = iprot.readBinary();
            struct.metrics.add(_elem40);
          }
        }
        struct.setMetricsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map42 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tags = new java.util.HashMap<java.nio.ByteBuffer,java.nio.ByteBuffer>(2*_map42.size);
          java.nio.ByteBuffer _key43;
          java.nio.ByteBuffer _val44;
          for (int _i45 = 0; _i45 < _map42.size; ++_i45)
          {
            _key43 = iprot.readBinary();
            _val44 = iprot.readBinary();
            struct.tags.put(_key43, _val44);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list46 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.aggregated_tags = new java.util.ArrayList<java.nio.ByteBuffer>(_list46.size);
          java.nio.ByteBuffer _elem47;
          for (int _i48 = 0; _i48 < _list46.size; ++_i48)
          {
            _elem47 = iprot.readBinary();
            struct.aggregated_tags.add(_elem47);
          }
        }
        struct.setAggregated_tagsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.aggregated_tag_values = new java.util.ArrayList<java.nio.ByteBuffer>(_list49.size);
          java.nio.ByteBuffer _elem50;
          for (int _i51 = 0; _i51 < _list49.size; ++_i51)
          {
            _elem50 = iprot.readBinary();
            struct.aggregated_tag_values.add(_elem50);
          }
        }
        struct.setAggregated_tag_valuesIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.disjoint_tags = new java.util.ArrayList<java.nio.ByteBuffer>(_list52.size);
          java.nio.ByteBuffer _elem53;
          for (int _i54 = 0; _i54 < _list52.size; ++_i54)
          {
            _elem53 = iprot.readBinary();
            struct.disjoint_tags.add(_elem53);
          }
        }
        struct.setDisjoint_tagsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.disjoint_tag_values = new java.util.ArrayList<java.nio.ByteBuffer>(_list55.size);
          java.nio.ByteBuffer _elem56;
          for (int _i57 = 0; _i57 < _list55.size; ++_i57)
          {
            _elem56 = iprot.readBinary();
            struct.disjoint_tag_values.add(_elem56);
          }
        }
        struct.setDisjoint_tag_valuesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

