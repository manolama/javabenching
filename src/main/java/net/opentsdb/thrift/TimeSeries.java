/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package net.opentsdb.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-25")
public class TimeSeries implements org.apache.thrift.TBase<TimeSeries, TimeSeries._Fields>, java.io.Serializable, Cloneable, Comparable<TimeSeries> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimeSeries");

  private static final org.apache.thrift.protocol.TField TSID_FIELD_DESC = new org.apache.thrift.protocol.TField("tsid", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField BASETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("basetime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ENCODING_FIELD_DESC = new org.apache.thrift.protocol.TField("encoding", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PAYLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("payload", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TIMESTAMPS_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamps", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("values", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TimeSeriesStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TimeSeriesTupleSchemeFactory();

  public net.opentsdb.thrift.TimeSeriesId tsid; // required
  public long basetime; // required
  public int encoding; // required
  public java.nio.ByteBuffer payload; // required
  public java.util.List<java.lang.Long> timestamps; // required
  public java.util.List<java.lang.Double> values; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TSID((short)1, "tsid"),
    BASETIME((short)2, "basetime"),
    ENCODING((short)3, "encoding"),
    PAYLOAD((short)4, "payload"),
    TIMESTAMPS((short)5, "timestamps"),
    VALUES((short)6, "values");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TSID
          return TSID;
        case 2: // BASETIME
          return BASETIME;
        case 3: // ENCODING
          return ENCODING;
        case 4: // PAYLOAD
          return PAYLOAD;
        case 5: // TIMESTAMPS
          return TIMESTAMPS;
        case 6: // VALUES
          return VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BASETIME_ISSET_ID = 0;
  private static final int __ENCODING_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TSID, new org.apache.thrift.meta_data.FieldMetaData("tsid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, net.opentsdb.thrift.TimeSeriesId.class)));
    tmpMap.put(_Fields.BASETIME, new org.apache.thrift.meta_data.FieldMetaData("basetime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENCODING, new org.apache.thrift.meta_data.FieldMetaData("encoding", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAYLOAD, new org.apache.thrift.meta_data.FieldMetaData("payload", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.TIMESTAMPS, new org.apache.thrift.meta_data.FieldMetaData("timestamps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.VALUES, new org.apache.thrift.meta_data.FieldMetaData("values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimeSeries.class, metaDataMap);
  }

  public TimeSeries() {
  }

  public TimeSeries(
    net.opentsdb.thrift.TimeSeriesId tsid,
    long basetime,
    int encoding,
    java.nio.ByteBuffer payload,
    java.util.List<java.lang.Long> timestamps,
    java.util.List<java.lang.Double> values)
  {
    this();
    this.tsid = tsid;
    this.basetime = basetime;
    setBasetimeIsSet(true);
    this.encoding = encoding;
    setEncodingIsSet(true);
    this.payload = org.apache.thrift.TBaseHelper.copyBinary(payload);
    this.timestamps = timestamps;
    this.values = values;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimeSeries(TimeSeries other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTsid()) {
      this.tsid = new net.opentsdb.thrift.TimeSeriesId(other.tsid);
    }
    this.basetime = other.basetime;
    this.encoding = other.encoding;
    if (other.isSetPayload()) {
      this.payload = org.apache.thrift.TBaseHelper.copyBinary(other.payload);
    }
    if (other.isSetTimestamps()) {
      java.util.List<java.lang.Long> __this__timestamps = new java.util.ArrayList<java.lang.Long>(other.timestamps);
      this.timestamps = __this__timestamps;
    }
    if (other.isSetValues()) {
      java.util.List<java.lang.Double> __this__values = new java.util.ArrayList<java.lang.Double>(other.values);
      this.values = __this__values;
    }
  }

  public TimeSeries deepCopy() {
    return new TimeSeries(this);
  }

  @Override
  public void clear() {
    this.tsid = null;
    setBasetimeIsSet(false);
    this.basetime = 0;
    setEncodingIsSet(false);
    this.encoding = 0;
    this.payload = null;
    this.timestamps = null;
    this.values = null;
  }

  public net.opentsdb.thrift.TimeSeriesId getTsid() {
    return this.tsid;
  }

  public TimeSeries setTsid(net.opentsdb.thrift.TimeSeriesId tsid) {
    this.tsid = tsid;
    return this;
  }

  public void unsetTsid() {
    this.tsid = null;
  }

  /** Returns true if field tsid is set (has been assigned a value) and false otherwise */
  public boolean isSetTsid() {
    return this.tsid != null;
  }

  public void setTsidIsSet(boolean value) {
    if (!value) {
      this.tsid = null;
    }
  }

  public long getBasetime() {
    return this.basetime;
  }

  public TimeSeries setBasetime(long basetime) {
    this.basetime = basetime;
    setBasetimeIsSet(true);
    return this;
  }

  public void unsetBasetime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BASETIME_ISSET_ID);
  }

  /** Returns true if field basetime is set (has been assigned a value) and false otherwise */
  public boolean isSetBasetime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BASETIME_ISSET_ID);
  }

  public void setBasetimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BASETIME_ISSET_ID, value);
  }

  public int getEncoding() {
    return this.encoding;
  }

  public TimeSeries setEncoding(int encoding) {
    this.encoding = encoding;
    setEncodingIsSet(true);
    return this;
  }

  public void unsetEncoding() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENCODING_ISSET_ID);
  }

  /** Returns true if field encoding is set (has been assigned a value) and false otherwise */
  public boolean isSetEncoding() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENCODING_ISSET_ID);
  }

  public void setEncodingIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENCODING_ISSET_ID, value);
  }

  public byte[] getPayload() {
    setPayload(org.apache.thrift.TBaseHelper.rightSize(payload));
    return payload == null ? null : payload.array();
  }

  public java.nio.ByteBuffer bufferForPayload() {
    return org.apache.thrift.TBaseHelper.copyBinary(payload);
  }

  public TimeSeries setPayload(byte[] payload) {
    this.payload = payload == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(payload.clone());
    return this;
  }

  public TimeSeries setPayload(java.nio.ByteBuffer payload) {
    this.payload = org.apache.thrift.TBaseHelper.copyBinary(payload);
    return this;
  }

  public void unsetPayload() {
    this.payload = null;
  }

  /** Returns true if field payload is set (has been assigned a value) and false otherwise */
  public boolean isSetPayload() {
    return this.payload != null;
  }

  public void setPayloadIsSet(boolean value) {
    if (!value) {
      this.payload = null;
    }
  }

  public int getTimestampsSize() {
    return (this.timestamps == null) ? 0 : this.timestamps.size();
  }

  public java.util.Iterator<java.lang.Long> getTimestampsIterator() {
    return (this.timestamps == null) ? null : this.timestamps.iterator();
  }

  public void addToTimestamps(long elem) {
    if (this.timestamps == null) {
      this.timestamps = new java.util.ArrayList<java.lang.Long>();
    }
    this.timestamps.add(elem);
  }

  public java.util.List<java.lang.Long> getTimestamps() {
    return this.timestamps;
  }

  public TimeSeries setTimestamps(java.util.List<java.lang.Long> timestamps) {
    this.timestamps = timestamps;
    return this;
  }

  public void unsetTimestamps() {
    this.timestamps = null;
  }

  /** Returns true if field timestamps is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamps() {
    return this.timestamps != null;
  }

  public void setTimestampsIsSet(boolean value) {
    if (!value) {
      this.timestamps = null;
    }
  }

  public int getValuesSize() {
    return (this.values == null) ? 0 : this.values.size();
  }

  public java.util.Iterator<java.lang.Double> getValuesIterator() {
    return (this.values == null) ? null : this.values.iterator();
  }

  public void addToValues(double elem) {
    if (this.values == null) {
      this.values = new java.util.ArrayList<java.lang.Double>();
    }
    this.values.add(elem);
  }

  public java.util.List<java.lang.Double> getValues() {
    return this.values;
  }

  public TimeSeries setValues(java.util.List<java.lang.Double> values) {
    this.values = values;
    return this;
  }

  public void unsetValues() {
    this.values = null;
  }

  /** Returns true if field values is set (has been assigned a value) and false otherwise */
  public boolean isSetValues() {
    return this.values != null;
  }

  public void setValuesIsSet(boolean value) {
    if (!value) {
      this.values = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TSID:
      if (value == null) {
        unsetTsid();
      } else {
        setTsid((net.opentsdb.thrift.TimeSeriesId)value);
      }
      break;

    case BASETIME:
      if (value == null) {
        unsetBasetime();
      } else {
        setBasetime((java.lang.Long)value);
      }
      break;

    case ENCODING:
      if (value == null) {
        unsetEncoding();
      } else {
        setEncoding((java.lang.Integer)value);
      }
      break;

    case PAYLOAD:
      if (value == null) {
        unsetPayload();
      } else {
        if (value instanceof byte[]) {
          setPayload((byte[])value);
        } else {
          setPayload((java.nio.ByteBuffer)value);
        }
      }
      break;

    case TIMESTAMPS:
      if (value == null) {
        unsetTimestamps();
      } else {
        setTimestamps((java.util.List<java.lang.Long>)value);
      }
      break;

    case VALUES:
      if (value == null) {
        unsetValues();
      } else {
        setValues((java.util.List<java.lang.Double>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TSID:
      return getTsid();

    case BASETIME:
      return getBasetime();

    case ENCODING:
      return getEncoding();

    case PAYLOAD:
      return getPayload();

    case TIMESTAMPS:
      return getTimestamps();

    case VALUES:
      return getValues();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TSID:
      return isSetTsid();
    case BASETIME:
      return isSetBasetime();
    case ENCODING:
      return isSetEncoding();
    case PAYLOAD:
      return isSetPayload();
    case TIMESTAMPS:
      return isSetTimestamps();
    case VALUES:
      return isSetValues();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TimeSeries)
      return this.equals((TimeSeries)that);
    return false;
  }

  public boolean equals(TimeSeries that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tsid = true && this.isSetTsid();
    boolean that_present_tsid = true && that.isSetTsid();
    if (this_present_tsid || that_present_tsid) {
      if (!(this_present_tsid && that_present_tsid))
        return false;
      if (!this.tsid.equals(that.tsid))
        return false;
    }

    boolean this_present_basetime = true;
    boolean that_present_basetime = true;
    if (this_present_basetime || that_present_basetime) {
      if (!(this_present_basetime && that_present_basetime))
        return false;
      if (this.basetime != that.basetime)
        return false;
    }

    boolean this_present_encoding = true;
    boolean that_present_encoding = true;
    if (this_present_encoding || that_present_encoding) {
      if (!(this_present_encoding && that_present_encoding))
        return false;
      if (this.encoding != that.encoding)
        return false;
    }

    boolean this_present_payload = true && this.isSetPayload();
    boolean that_present_payload = true && that.isSetPayload();
    if (this_present_payload || that_present_payload) {
      if (!(this_present_payload && that_present_payload))
        return false;
      if (!this.payload.equals(that.payload))
        return false;
    }

    boolean this_present_timestamps = true && this.isSetTimestamps();
    boolean that_present_timestamps = true && that.isSetTimestamps();
    if (this_present_timestamps || that_present_timestamps) {
      if (!(this_present_timestamps && that_present_timestamps))
        return false;
      if (!this.timestamps.equals(that.timestamps))
        return false;
    }

    boolean this_present_values = true && this.isSetValues();
    boolean that_present_values = true && that.isSetValues();
    if (this_present_values || that_present_values) {
      if (!(this_present_values && that_present_values))
        return false;
      if (!this.values.equals(that.values))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTsid()) ? 131071 : 524287);
    if (isSetTsid())
      hashCode = hashCode * 8191 + tsid.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(basetime);

    hashCode = hashCode * 8191 + encoding;

    hashCode = hashCode * 8191 + ((isSetPayload()) ? 131071 : 524287);
    if (isSetPayload())
      hashCode = hashCode * 8191 + payload.hashCode();

    hashCode = hashCode * 8191 + ((isSetTimestamps()) ? 131071 : 524287);
    if (isSetTimestamps())
      hashCode = hashCode * 8191 + timestamps.hashCode();

    hashCode = hashCode * 8191 + ((isSetValues()) ? 131071 : 524287);
    if (isSetValues())
      hashCode = hashCode * 8191 + values.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TimeSeries other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTsid()).compareTo(other.isSetTsid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTsid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tsid, other.tsid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBasetime()).compareTo(other.isSetBasetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBasetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.basetime, other.basetime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEncoding()).compareTo(other.isSetEncoding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncoding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encoding, other.encoding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPayload()).compareTo(other.isSetPayload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayload()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payload, other.payload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimestamps()).compareTo(other.isSetTimestamps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamps, other.timestamps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetValues()).compareTo(other.isSetValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.values, other.values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TimeSeries(");
    boolean first = true;

    sb.append("tsid:");
    if (this.tsid == null) {
      sb.append("null");
    } else {
      sb.append(this.tsid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("basetime:");
    sb.append(this.basetime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("encoding:");
    sb.append(this.encoding);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payload:");
    if (this.payload == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.payload, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamps:");
    if (this.timestamps == null) {
      sb.append("null");
    } else {
      sb.append(this.timestamps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("values:");
    if (this.values == null) {
      sb.append("null");
    } else {
      sb.append(this.values);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (tsid != null) {
      tsid.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimeSeriesStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TimeSeriesStandardScheme getScheme() {
      return new TimeSeriesStandardScheme();
    }
  }

  private static class TimeSeriesStandardScheme extends org.apache.thrift.scheme.StandardScheme<TimeSeries> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TimeSeries struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TSID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tsid = new net.opentsdb.thrift.TimeSeriesId();
              struct.tsid.read(iprot);
              struct.setTsidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BASETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.basetime = iprot.readI64();
              struct.setBasetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENCODING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.encoding = iprot.readI32();
              struct.setEncodingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAYLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payload = iprot.readBinary();
              struct.setPayloadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIMESTAMPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.timestamps = new java.util.ArrayList<java.lang.Long>(_list0.size);
                long _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI64();
                  struct.timestamps.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTimestampsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.values = new java.util.ArrayList<java.lang.Double>(_list3.size);
                double _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readDouble();
                  struct.values.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TimeSeries struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tsid != null) {
        oprot.writeFieldBegin(TSID_FIELD_DESC);
        struct.tsid.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BASETIME_FIELD_DESC);
      oprot.writeI64(struct.basetime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENCODING_FIELD_DESC);
      oprot.writeI32(struct.encoding);
      oprot.writeFieldEnd();
      if (struct.payload != null) {
        oprot.writeFieldBegin(PAYLOAD_FIELD_DESC);
        oprot.writeBinary(struct.payload);
        oprot.writeFieldEnd();
      }
      if (struct.timestamps != null) {
        oprot.writeFieldBegin(TIMESTAMPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.timestamps.size()));
          for (long _iter6 : struct.timestamps)
          {
            oprot.writeI64(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.values != null) {
        oprot.writeFieldBegin(VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.values.size()));
          for (double _iter7 : struct.values)
          {
            oprot.writeDouble(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimeSeriesTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TimeSeriesTupleScheme getScheme() {
      return new TimeSeriesTupleScheme();
    }
  }

  private static class TimeSeriesTupleScheme extends org.apache.thrift.scheme.TupleScheme<TimeSeries> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TimeSeries struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTsid()) {
        optionals.set(0);
      }
      if (struct.isSetBasetime()) {
        optionals.set(1);
      }
      if (struct.isSetEncoding()) {
        optionals.set(2);
      }
      if (struct.isSetPayload()) {
        optionals.set(3);
      }
      if (struct.isSetTimestamps()) {
        optionals.set(4);
      }
      if (struct.isSetValues()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTsid()) {
        struct.tsid.write(oprot);
      }
      if (struct.isSetBasetime()) {
        oprot.writeI64(struct.basetime);
      }
      if (struct.isSetEncoding()) {
        oprot.writeI32(struct.encoding);
      }
      if (struct.isSetPayload()) {
        oprot.writeBinary(struct.payload);
      }
      if (struct.isSetTimestamps()) {
        {
          oprot.writeI32(struct.timestamps.size());
          for (long _iter8 : struct.timestamps)
          {
            oprot.writeI64(_iter8);
          }
        }
      }
      if (struct.isSetValues()) {
        {
          oprot.writeI32(struct.values.size());
          for (double _iter9 : struct.values)
          {
            oprot.writeDouble(_iter9);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TimeSeries struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.tsid = new net.opentsdb.thrift.TimeSeriesId();
        struct.tsid.read(iprot);
        struct.setTsidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.basetime = iprot.readI64();
        struct.setBasetimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.encoding = iprot.readI32();
        struct.setEncodingIsSet(true);
      }
      if (incoming.get(3)) {
        struct.payload = iprot.readBinary();
        struct.setPayloadIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.timestamps = new java.util.ArrayList<java.lang.Long>(_list10.size);
          long _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = iprot.readI64();
            struct.timestamps.add(_elem11);
          }
        }
        struct.setTimestampsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.values = new java.util.ArrayList<java.lang.Double>(_list13.size);
          double _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readDouble();
            struct.values.add(_elem14);
          }
        }
        struct.setValuesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

