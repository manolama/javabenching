akka.http {


  server {
    # TODO - tune this. If we allow keep-alives we'd be silly to let this be smaller than the
    # backlog.
    max-connections = 1024

    backlog = 8192

    parsing {
      illegal-header-warnings = off
      modeled-header-parsing = off
    }
  }

  client {
    # TODO - old code had a 15s read tiemout. No such config per https://doc.akka.io/docs/akka-http/current/configuration.html
    connecting-timeout = 3s

    idle-timeout = 61s

    socket-options {
      so-reuse-address = true
      tcp-keep-alive = true
      tcp-no-delay = true
    }
  }

  host-connection-pool {
    # ??? That seems awfully high but it's what the old code had.
    max-connections = 500

    # Retries handled by the queue logic.
    max-retries = 0

    # To let us distribute connections? Otherwise the default is
    # max-connection-lifetime = infinite
    max-connection-lifetime = 5m

    # Leaving this here as a reminder if needed.
    # per-host-override = []
  }
}

atlas.akka {
  port = 7101
  api-endpoints = [
    "com.netflix.atlas.akka.ConfigApi",
    "com.netflix.atlas.akka.HealthcheckApi",
    "com.netflix.atlas.mock.PublishServlet"
  ]
  request-handler.compression = false
}

atlas.webapi.publish.rules = [
  {
    class = "com.netflix.atlas.core.validation.HasKeyRule"
    key = "name"
  },
  {
    class = "com.netflix.atlas.core.validation.KeyLengthRule"
    min-length = 2
    max-length = 60
  },
  {
    class = "com.netflix.atlas.core.validation.NameValueLengthRule"
    name {
      min-length = 2
      max-length = 255
    }
    others {
      min-length = 1
      max-length = 120
    }
  },
  {
    class = "com.netflix.atlas.core.validation.ValidCharactersRule"
    default-pattern = "-._A-Za-z0-9^~"
    overrides = []
  },
  {
    class = "com.netflix.atlas.core.validation.MaxUserTagsRule"
    limit = 20
  },
  {
    class = "com.netflix.atlas.core.validation.ReservedKeyRule"
    prefix = "atlas."
    allowed-keys = [
      "aggr",
      "dstype",
      "offset",
      "legacy"
    ]
  },
  {
    class = "com.netflix.atlas.core.validation.ReservedKeyRule"
    prefix = "nf."
    allowed-keys = [
      "account",
      "ami",
      "app",
      "asg",
      "cluster",
      "country",
      "country.rollup",
      "job",
      "node",
      "region",
      "shard1",
      "shard2",
      "stack",
      "subnet",
      "task",
      "vmtype",
      "vpc",
      "zone"
    ]
  }
]

netflix.iep.atlas {
  uri = "http://atlas-pub-iep.us-east-1.ieptest.netflix.net/api/v1/publish"
  #uri = "http://atlas-pub-"${netflix.iep.env.account-id}"."${netflix.iep.env.region}".iep"${netflix.iep.env.account-env}".netflix.net/api/v1/publish-fast"
}

iep.atlas {
  uri = "http://atlas-pub-iep.us-east-1.ieptest.netflix.net/api/v1/publish"
  #uri = "http://atlas-pub-"${netflix.iep.env.account-id}"."${netflix.iep.env.region}".iep"${netflix.iep.env.account-env}".netflix.net/api/v1/publish-fast"
}

atlas {
  publish.max-permitted-tags = 20

}
publish.max-permitted-tags = 20
# atlas {
#   uri = "http://atlas-pub-iep.us-east-1.ieptest.netflix.net/api/v1/publish"
#   #uri = "http://atlas-pub-"${netflix.iep.env.account-id}"."${netflix.iep.env.region}".iep"${netflix.iep.env.account-env}".netflix.net/api/v1/publish-fast"
# }

# netflix.publish.proxy {
#     filter = "name,^(EpicAgent_|NamedConnectionPool_|ZoneStats_|NFHttpClient_|ZoneAwareLoadBalancer_|AsyncAppender_|BaseLoadBalancer_),:re,:not"
#
#     endpoints = "uswest2internal,euwest1internal,persistence,lwc"
#
#     local {
#       host = "atlas-publish-${NETFLIX_STACK}-internal.${EC2_REGION}.iep${NETFLIX_ENVIRONMENT}.netflix.net:80"
#       isSecure = false
#     }
#
#     persistence {
#       host = "atlas-persistence-${NETFLIX_STACK}.${EC2_REGION}.iep${NETFLIX_ENVIRONMENT}.netflix.net:80"
#       isSecure = false
#     }
#
#     persistence-main.host = "atlas-persistence-main.${EC2_REGION}.iep${NETFLIX_ENVIRONMENT}.netflix.net:80"
#     persistence-main.isSecure = false
#
#     uswest2-main.host = "atlas-publish-main-internal.us-west-2.iep${NETFLIX_ENVIRONMENT}.netflix.net:80"
#     uswest2-main.isSecure = false
#
#     euwest1-main.host = "atlas-publish-main-internal.eu-west-1.iep${NETFLIX_ENVIRONMENT}.netflix.net:80"
#     euwest1-main.isSecure = false
#
#     lwc-main.host = "atlas-lwc-bridge-main.${EC2_REGION}.iep${NETFLIX_ENVIRONMENT}.netflix.net:80"
#     lwc-main.isSecure = false
#
#     lwc.host = "atlas-lwc-bridge-${NETFLIX_STACK}.${EC2_REGION}.iep${NETFLIX_ENVIRONMENT}.netflix.net:80"
#     lwc.isSecure = false
#
#     lwcwest2.host = "atlas-lwc-bridge-${NETFLIX_STACK}global.us-west-2.iep${NETFLIX_ENVIRONMENT}.netflix.net:80"
#     lwcwest2.isSecure = false
#
#     lwc-staging.host = "atlas-lwc-bridge-staging.${EC2_REGION}.iep${NETFLIX_ENVIRONMENT}.netflix.net:80"
#     lwc-staging.isSecure = false
#
#     uswest2internal.host = "atlas-publish-${NETFLIX_STACK}-internal.us-west-2.iep${NETFLIX_ENVIRONMENT}.netflix.net:80"
#     uswest2internal.isSecure = false
#
#     euwest1internal.host = "atlas-publish-${NETFLIX_STACK}-internal.eu-west-1.iep${NETFLIX_ENVIRONMENT}.netflix.net:80"
#     euwest1internal.isSecure = false
#
#     unitTest {
#       host = "localhost:80"
#       isSecure = false
#     }
# }